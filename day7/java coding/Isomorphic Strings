//Isomorphic Strings
//Given two strings 'str1' and 'str2', check if these two strings are isomorphic to each other.
//if the characters in str1 can be changed to get str2, then two strings, str1 and str2, are isomorphic. A character must be completely swapped out for another character while maintaining the order of the characters.
//  A character may map to itself, but no two characters may map to the same character.

class Solution
{
    //Function to check if two strings are isomorphic.
    public static boolean areIsomorphic(String str1,String str2)
    {
        int size=256;
        int m=str1.length();
        int n=str2.length();
        
        if(m!=n)
            return false;
            
        //using boolean array to mark visited characters in str2.
        Boolean[] marked=new Boolean[size];
        Arrays.fill(marked,Boolean.FALSE);
        
        //using map to store mapping of every character from str1 to that of str2.
        //Initialising all entires of map as -1.
        
        int[] map=new int[size];
        Arrays.fill(map,-1);
        
        for(int i=0;i<n;i++){
            //if current char of str1 is seen first time map
            if(map[str1.charAt(i)]==-1){
                //if current char of str2 is already seen, one to one mapping not possible 
                if(marked[str2.charAt(i)]==true)
                    return false;
                    
                //marking current char of str2 as visited
                marked[str2.charAt(i)]=true;
                
                //storing mapping of current char
                map[str1.charAt(i)]=str2.charAt(i);
            }
            
            //if its not 1st appearance of current char in  str1 then
            //check if previous appearance mapped to same char of str2.
            else if(map[str1.charAt(i)]!=str2.charAt(i))
                return false;
        }
        return true;
        
        
    }
}
