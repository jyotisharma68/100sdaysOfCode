//Subarray with given sum
//Given an unsorted array A of size N that contains only non negative integers,
//find a continuous sub-array that adds to a given number S and return the left
//and right index(1-based indexing) of that subarray.
//In case of multiple subarrays, return the subarray indexes which come first on moving 
//from left to right.

class Solution
{
    //Function to find a continuous sub-array which adds up to a given number.
    static ArrayList<Integer> subarraySum(int[] arr, int n, int s) 
    {
        // Your code here
        int start=0;
        int last=0;
        boolean flag=false;
        int currsum=0;
        ArrayList<Integer> res=new ArrayList<Integer>();
        
        //iterating over the array
        for(int i=0;i<n;i++){
            //storing the sum upto current element
            currsum+=arr[i];
            
            //check if current sum is > or = to given no
            if(currsum>=s){
                last=i;
                
                //start fromstarting index till current index and exclude part while s(given no)<currsum
                while(s<currsum&&start<last){
                    //subtract the element from left, arr[start]
                    currsum-=arr[start];
                    ++start;
                }
                
                //if currrent sum becomes equal to given no, store the starting and ending index for subarray
                if(currsum==s){
                    res.add(start+1);
                    res.add(last+1);
                    
                    //flag is set to true since subaary exists
                    flag=true;
                    break;
                }
            }
        }
        
        //if no subarray is found , we store -1 inn result else the found index
        if(flag==false){
            res.add(-1);
        }
        //return the result
        return res;
    }
}
