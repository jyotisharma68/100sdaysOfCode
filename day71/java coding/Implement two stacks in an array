//Implement two stacks in an array
//Your task is to implement  2 stacks in one array efficiently. You need to implement 4 methods.

///twoStacks : Initialize the data structures and variables to be used to implement  2 stacks in one array.
///push1 : pushes element into first stack.
//push2 : pushes element into second stack.
//pop1 : pops element from first stack and returns the popped element. If first stack is empty, it should return -1.
//pop2 : pops element from second stack and returns the popped element. If second stack is empty, it should return -1.


class twoStacks
{
    int arr[];
    int size;
    int top1, top2;
    twoStacks()
    {
        size = 100; 
        arr = new int[100]; 
        top1 = -1; 
        top2 = size;
    }
    //Function to push an integer into the stack1.
    void push1(int x)
    {
     //if there is space btw top of both stacks push element at top+1
     if (top1 < top2 - 1)
        {
           top1++;
           arr[top1] = x;
        }
    }
    //Function to push an integer into the stack2.
    void push2(int x)
    {
       //if there is space btw top of both stacks push element at top2-1
        if (top1 < top2 - 1)
       {
           top2--;
           arr[top2] = x;
       }
    }
    //Function to remove an element from top of the stack1.
    int pop1()
    {
        //if top==-1,stack1 is empty return -1 else , return top element of stack1
        if (top1 >= 0 )
        {
            int x = arr[top1];
            top1--;
            return x;
        }
        else
            return -1;
    }
    //Function to remove an element from top of the stack2.
    int pop2()
    {
        //if top2==size of array,stack2 is empty return -1 else return top element of stack2
         if (top2 < size)
        {
            int x = arr[top2];
            top2++;
            return x;
        }
        else
            return -1;
    }
}

