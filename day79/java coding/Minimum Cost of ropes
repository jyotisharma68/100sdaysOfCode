//Minimum Cost of ropes
//There are given N ropes of different lengths, we need to connect these ropes into one rope. The cost to connect two ropes is equal to sum of their lengths.
//The task is to connect the ropes with minimum cost. Given N size array arr[] contains the lengths of the ropes. 



class Solution
{
    //Function to return the minimum cost of connecting the ropes.
    long minCost(long arr[], int n) 
    {
        // implement MInHeap using prioity queue
        PriorityQueue<Long> pq=new PriorityQueue<>();
        
        for(int i=0;i<n;i++) pq.add(arr[i]);
        Long cost=new Long("0");
        
        //use loop while there is more than one elementin priority queue
        while(pq.size()!=1){
            //store first and 2nd nos from priority queue
            long x=pq.poll();
            long y=pq.poll();
            
            //add their sum in result
            cost+=(x+y);
            
            //push sum of 1st and 2nd nos in priority queue
            pq.add(x+y);
        }
        
        //return result
        return cost;
    }
}
