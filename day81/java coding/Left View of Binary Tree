//Left View of Binary Tree
/* 
Given a Binary Tree, return Left view of it. Left view of a Binary Tree is set of nodes visible when tree is visited from Left side. The task is to complete the function leftView(), which accepts root of the tree as argument. If no left view is possible, return an empty tree.

Left view of following tree is 1 2 4 8.

          1
       /     \
     2        3
   /     \    /    \
  4     5   6    7
   \
     8   
*/

class Tree
{
    int max_level=0;
    
    //function to get left view of binary tree
    void leftViewUtil(ArrayList<Integer> result, Node node, int level){
        
        //if root is null,return it
        if(node==null) return;
        
        //if this is first node of its level then it is binary tree
        if(max_level<level){
            //store data of current node in list
            result.add(node.data);
            max_level=level;
        }
        
        //call function recursively for left and right subtrees of current node
        leftViewUtil(result,node.left,level+1);
        leftViewUtil(result,node.right,level+1);
        
        
    }
    //Function to return list containing elements of left view of binary tree.
    ArrayList<Integer> leftView(Node root)
    {
      ArrayList<Integer> result=new ArrayList<Integer>();
      leftViewUtil(result,root,1);
      //return list
      return result;
    }
}
