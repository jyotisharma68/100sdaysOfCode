//Top View of Binary Tree
/*
Given below is a binary tree. The task is to print the top view of binary tree. Top view of a binary tree is the set of nodes visible when the tree is viewed from the top. For the given below tree

       1
    /     \
   2       3
  /  \    /   \
4    5  6   7

Top view will be: 4 2 1 3 7
Note: Return nodes from leftmost node to rightmost node. Also if 2 nodes are outside the shadow of the tree and are at same position then consider the left ones only(i.e. leftmost). 
For ex - 1 2 3 N 4 5 N 6 N 7 N 8 N 9 N N N N N will give 8 2 1 3 as answer. Here 8 and 9 are on the same position but 9 will get shadowed.

*/


/*
class Node{
    int data;
    Node left;
    Node right;
    Node(int data){
        this.data = data;
        left=null;
        right=null;
    }
}
*/
class qObj{
    Node node;
    int level;
    qObj(Node n,int l){
        node=n;
        level=l;
    }
}

class Solution
{
    //Function to return a list of nodes visible from the top view 
    //from left to right in Binary Tree.
    public static ArrayList<Integer> topView(Node root)
    {
        ArrayList<Integer> ans=new ArrayList<>();
        
        //create empty queue for level order traversal
        Queue<qObj> q=new LinkedList<qObj>();
        q.add(new qObj(root,1));
        
        //create a map to store nodes at particular horizontal distance
        Map<Integer,Integer> map=new TreeMap<Integer,Integer>();
        
        while(!q.isEmpty()){
            qObj popped=q.poll();
            if(!map.containsKey(popped.level))
            map.put(popped.level,popped.node.data);
            
            //if left child of popped.node exists,push it in queue with horizontal distance
            if(popped.node.left!=null)
            q.add(new qObj(popped.node.right,popped.level+1));
        }
        
        //traverse the map and store the nodes in list at every horizontal distance
        for(Map.Entry<Integer,Integer> e:map.entrySet()){
            ans.add(e.getValue());
        }
        
        //return output list
        return ans;
        
    }
}
