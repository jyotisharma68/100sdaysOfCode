//BFS of graph
/*
Given a directed graph. The task is to do Breadth First Traversal of this graph starting from 0.
Note: One can move from node u to node v only if there's an edge from u to v. Find the BFS traversal of the graph starting from the 0th vertex, from left to right according to the input graph.
Also, you should only take nodes directly or indirectly connected from Node 0 in consideration.
*/



class Solution {
    // Function to return Breadth First Traversal of given graph.
    public ArrayList<Integer> bfsOfGraph(int V, ArrayList<ArrayList<Integer>> adj) {
        // boolean list to mark all vertices are not visited
        boolean visited[] = new boolean[V];
        
        int s =0;
        //intially mark 1st vertex as visited(true)
        visited[s]=true;
        
        ArrayList<Integer> res=new ArrayList<>();
        
        //creating queue for BFS and push first vertex in queue
        LinkedList<Integer> q=new LinkedList<Integer>();
        q.add(s);
        
        while(q.size()!=0){
            //add front element list and pop it from queue
            s=q.poll();
            res.add(s);
            
            //traverse over all connected components of front element
            Iterator<Integer> i=adj.get(s).listIterator();
            while(i.hasNext()){
                int n=i.next();
                //if they arent visited, mark them visited and add to queue
                if(!visited[n]){
                    visited[n]=true;
                    q.add(n);
                }
            }
        }
        
        //return output list
        return res;
    }
}
