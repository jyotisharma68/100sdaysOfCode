//Minimum Platforms
//Given arrival and departure times of all trains that reach a railway station. Find the minimum 
//number of platforms required for the railway station so that no train is kept waiting.
//Consider that all the trains arrive on the same day and leave on the same day. 
//Arrival and departure time can never be the same for a train but we can have arrival time of
//one train equal to departure time of the other. At any given instance of time, same platform
//can not be used for both departure of a train and arrival of another train.
 // In such cases, we need different platforms.

class pair{
    int first;
    char second;
    pair(int key1,char key2){
        this.first=key1;
        this.second=key2;
    }
}

class Solution{
    //function to find min no of platforms required at railway station such that no train wait
    public static int findPlatform(int arr[],int dep[],int n){
        ArrayList<pair> order=new ArrayList<>();
        
        //insert all values of time(arrival and departure) in ArrayList of pair
        for(int i=0;i<n;i++){
            //if time is of arrival then keep second value of pair as 'a' else 'd'
            order.add(new pair(arr[i],'a'));
            order.add(new pair(dep[i],'d'));
        }
        
        //using  custom sort on ArrayList,1st acc to time and is time is same for 2 events,then arrival comes first followed by departure
        Collections.sort(order,new Comparator<pair>(){
            @Override public int compare(pair p1,pair p2){
                if(p1.first==p2.first)
                    return new Character(p1.second).compareTo(new Character(p2.second));
                return p1.first-p2.first;
            }
        }
        );
        int result=1;
        int plat_needed=0;
        for(int i=0;i<order.size();i++){
            pair p=order.get(i);
            
            //if second value of list element is 'a' which stands for arrival then add 1 to
            //platform needed else we subtract 1 from platfrom needed.
            if(p.second=='a')
                plat_needed++;
            else
                plat_needed--;
                
                
            //keep updating the value of result.
            if(plat_needed>result)
                result=plat_needed;
        }
        
        //return the min no of platforms required
        return result;
    }
}
