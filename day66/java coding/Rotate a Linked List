//Rotate a Linked List
//Given a singly linked list of size N. The task is to left-shift the linked list by k nodes, where k is a given positive integer smaller than or equal to length of the linked list.

/* node of linked list:

class Node{
    int data;
    Node next;
    Node(int d){
        data=d;
        next=null;
    }
}

*/

class Solution{
    //Function to rotate a linked list.
    public Node rotate(Node head, int k) {
        if(k==0) return head;
        
        Node walk=head;
        Node prev=null;
        
        //this loop runs k times and walk pointer moves k nodes ahead and reaches new head node
        while(k-->0 && walk!=null){
            prev=walk;
            walk=walk.next;
        }
        
        //comsider cases where k>=n so nthg needs to be done
        if(walk==null) return head;
        
        //store the walk pointer which gives 1st node in newhead
        Node newHead=walk;
        
        //prev pts to node placed before new head it is new tail
        //or last node of new list so we store null in its link part
        prev.next=null;
        
        //keep moving walk pointer till we reach last node of list
        while(walk.next!=null)
            walk=walk.next;
            
        //connect last node of old list to old head
        walk.next=head;
        
        //return new list
        return newhead;
    }
}
