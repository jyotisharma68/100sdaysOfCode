//Lowest Common Ancestor in a BST
//Given a Binary Search Tree (with all values unique) and two node values n1 and n2 (n1!=n2). Find the Lowest Common Ancestors of the two nodes in the BST.


class BST
{   
    //Function to find the lowest common ancestor in a BST. 
	Node LCA(Node node, int n1, int n2)
	{
        // base case
        if(node==null){
            return null;
        }
        
        //if both n1 and n2 are smaller than data at current node,call the function recursively for finding LCA in left subtree
        if(node.data>n1 && node.data>n2){
            return LCA(node.left,n1,n2);
        }
        
        //if both n1 and n2 are greater than data at current node,call the function recursively for finding LCA in right subtree
        if(node.data<n1 && node.data<n2){
            return LCA(node.right,n1,n2);
        }
        
        //return lowest common ancestor
        return node;
    }
    
}
