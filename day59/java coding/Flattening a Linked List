//Flattening a Linked List
//Given a Linked List of size N, where every node represents a sub-linked-list and contains two pointers:
//(i) a next pointer to the next node,
//(ii) a bottom pointer to a linked list where this node is head.
//Each of the sub-linked-list is in sorted order.
//Flatten the Link List such that all the nodes appear in a single level while maintaining the sorted order. 
//Note: The flattened list will be printed using the bottom pointer instead of next pointer.


/*Node class  used in the program
class Node
{
	int data;
	Node next;
	Node bottom;
	
	Node(int d)
	{
		data = d;
		next = null;
		bottom = null;
	}
}
*/
/*  Function which returns the  root of 
    the flattened linked list. */
class GfG
{
    
    Node merge(Node a,Node b){
        //if one node is null,return other node
        if(a==null) return b;
        if(b==null) return a;
        
        Node result;
        
        //choose smaller data  node as result
        if(a.data<b.data){
            result=a;
            //merge bottom node of 'a' with 'b'
            result.bottom=merge(a.bottom,b);
        }
        else{
            result=b;
            //merge 'a' with bottom node of 'b'
            result.bottom=merge(a,b.bottom);
        }
        //return merged result
        return result;
    }
    
    //function to flatten given linked list
    Node flatten(Node root)
    {
        //base case: if root is null or only one node is present,return root
        if(root==null||root.next==null)
        return root;
        
        //recursively flatten next node
        root.next=flatten(root.next);
        
        //merge current node with flattened next node
        root=merge(root,root.next);
        
        //return flattened result
        return root;
        
	
    }
}
