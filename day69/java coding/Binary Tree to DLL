//Binary Tree to DLL
//Given a Binary Tree (BT), convert it to a Doubly Linked List(DLL) In-Place. The left and right pointers in nodes are to be used as previous
//and next pointers respectively in converted DLL. The order of nodes in DLL must be same as Inorder of the given Binary Tree. The first node of Inorder traversal (leftmost node in BT) must be the head node of the DLL.

//Note: H is the height of the tree and this space is used implicitly for the recursion stack.

/* class Node
class Node
{
	Node left, right;
	int data;
	
	Node(int d)
	{
		data = d;
		left = right = null;
	}
	
}*/

//This function should return head to the DLL

class Solution
{
    Node head;
    //Function to convert binary tree to doubly linked list and return it.
    Node bToDLL(Node root)
    {
        //base case for recursion.
		if(root == null)
			return null;
		
		//calling function recursively to convert right subtrees.
		bToDLL(root.right);
		
		//inserting root into doubly linked list. 
		root.right = head;
		
		//changing left pointer of previous head.
		if(head != null)
			head.left = root;
		
		//changing head of doubly linked list.
		head = root;
		
		//calling function recursively to convert left subtrees.
		bToDLL(root.left);
		
		return head;
		
    }
}
