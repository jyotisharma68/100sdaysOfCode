//Insert and Search in a Trie
/*
Complete the Insert and Search functions for a Trie Data Structure. 

Insert: Accepts the Trie's root and a string, modifies the root in-place, and returns nothing.
Search: Takes the Trie's root and a string, returns true if the string is in the Trie, otherwise false.
Note: To test the correctness of your code, the code-judge will be inserting a list of N strings called into the Trie, and then will search for the string key in the Trie. 
The code-judge will generate 1 if the key is present in the Trie, else 0.
*/

/*
static final int ALPHABET_SIZE = 26;

    // trie node
    static class TrieNode {
        TrieNode[] children = new TrieNode[ALPHABET_SIZE];

        // isEndOfWord is true if the node represents
        // end of a word
        boolean isEndOfWord;

        TrieNode() {
            isEndOfWord = false;
            for (int i = 0; i < ALPHABET_SIZE; i++) children[i] = null;
        }
    };
*/
//Function to insert string into TRIE.
static void insert(TrieNode root, String key) 
{
     TrieNode curr=root;
    for(int i=0;i<key.length();i++) 
    {
        int index=key.charAt(i)-'a';
        if(curr.children[index]==null) 
        {
            curr.children[index]=new TrieNode();
		}
		curr=curr.children[index];
	}
	curr.isEndOfWord=true;
}

//Function to use TRIE data structure and search the given string.
static boolean search(TrieNode root, String key)
{
    if(root==null) 
    {
        return false;
    }
    TrieNode curr=root;
    for(int i=0;i<key.length();i++) 
    {
        int index=key.charAt(i)-'a';
        if(curr.children[index]==null) 
        {
            return false;
		}
		curr=curr.children[index];
	}
	return curr.isEndOfWord;
}
