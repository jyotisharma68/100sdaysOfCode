//Given an expression string x. Examine whether the pairs and the orders of {,},(,),[,] are correct in exp.
//For example, the function should return 'true' for exp = [()]{}{[()()]()} and 'false' for exp = [(]).

class Solution
{
    //fucntion to check that opening and closing brackets are of same type
    static boolean comp(char a, char b){
        if(a=='{'&& b=='}'){
            return true;
        }else if(a=='['&&b==']'){
            return true;
        }else if(a=='('&&b==')'){
            return true;
        }
        return false;
    }
    //Function to check if brackets are balanced or not.
    static boolean ispar(String x)
    {
        // add your code here
        Stack<Character> s=new Stack<>();
        
        for(int i=0;i<x.length();i++){
            //if opening brackets are encountered,push them into stack
             if(x.charAt(i)=='[' || x.charAt(i)=='{' || x.charAt(i)=='(') {
                 s.push(x.charAt(i));
             }
             //if closing brackets are encountered,compare them with top of stack
             else if(x.charAt(i)==']' || x.charAt(i)=='}' || x.charAt(i)==')') {
                 //if top of the stack has opening bracket of different type,return false
                 if(s.isEmpty() == true || !comp(s.peek(),x.charAt(i))) {
                      return false;
                 }else{
                     s.pop();
                 }
                   
             }
                
        }
        //if stack becomes empty, retrun true, else false
        if(s.isEmpty()==true){
            return true;
        }else{
            return false;
        }
    }
}
