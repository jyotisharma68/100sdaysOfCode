//Queue using two Stacks
//Implement a Queue using 2 stacks s1 and s2 .
//A Query Q is of 2 Types
//(i) 1 x (a query of this type means  pushing 'x' into the queue)
//(ii) 2   (a query of this type means to pop element from queue and print the poped element)

class StackQueue
{
    Stack<Integer> s1 = new Stack<Integer>();
    Stack<Integer> s2 = new Stack<Integer>();

    //Function to push an element in queue by using 2 stacks.
    void Push(int x)
    {
	   // insert element in 1st stack
	   s1.push(x);
    }
	
    
    //Function to pop an element from queue by using 2 stacks.
    int Pop()
    {
	   if(s2.isEmpty()){
	       //if both stacks are empty,return -1
	       if(s1.isEmpty())
	           return -1;
	           
	           
	       //keep removing top element from 1st stack and push them in 2nd stack. order gets reversed
	       while(!s1.isEmpty()){
	           int r=s1.peek();
	           s1.pop();
	           s2.push(r);
	       }
	       
	       //second stack holds elements in reversed order , store and opo element at top of stack
	       int k=s2.peek();
	       s2.pop();
	       
	       while(!s2.isEmpty()){
	           int l=s2.peek();
	           s2.pop();
	           s1.push(l);
	       }
	       return k;
	   }
	   return -1;
    }  
}
